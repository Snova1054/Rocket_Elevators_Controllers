DEFINE Battery USING nbColumns AND nbFloors AND nbFloorsPerColumn AND nbBasements AND nbElevators AND nbElevatorsPerColumn

    SET columnIndex TO 1
    SET ifBasement TO CALL checkIfBasement WITH nbBasements RETURNING ifBasement
    SET columnsList TO CALL createColumnsList WITH nbColumns AND ifBasement AND nbBasements AND nbFloors AND nbFloorsPerColumn AND nbElevatorsPerColumn AND columnIndex RETURNING columnsList

    SEQUENCE checkIfBasement USING nbBasements RETURN ifBasement
        IF nbBasements IS GREATER THAN 0
            SET ifBasement TO TRUE
        ELSE
            SET ifBasement TO FALSE
        ENDIF
        RETURN ifBasement
    ENDSEQUENCE

    SEQUENCE createColumnsList USING nbColumns AND ifBasement AND nbBasements AND nbFloors AND nbFloorsPerColumn AND nbElevatorsPerColumn AND columnIndex RETURN columnsList
        SET columnsList
        SET nbUpperFloors TO nbFloors DIVIDED BY nbFloorsPerColumn
        IF ifBasement IS TRUE
            SET columnsList columnIndex TO NEW Column WITH nbBasements AND columnIndex
            INCREMENT columnIndex
            FOR nbColumns
                INCREMENT nbColumns Index
                SET columnsList columnIndex TO NEW Column WITH nbUpperFloors AND columnIndex
                INCREMENT columnIndex
            ENDFOR
        ELSE
            FOR nbColumns
                SET columnsList columnIndex TO NEW Column WITH nbUpperFloors AND columnIndex AND nbElevatorsPerColumn
                INCREMENT columnIndex
            ENDFOR
        ENDIF
        
        RETURN columnsList
    ENDSEQUENCE

    SEQUENCE createMainPanel USING nbFloors AND nbBasements
        FOR nbFloors ADD nbBasements
            SET mainPanelList TO NEW mainPanel WITH columnIndex
            INCREMENT columnIndex
    ENDSEQUENCE

    SEQUENCE callElevatorFromLobby USING userInputFloor
        SET rightNbOfColumn TO nbColumns MINUS 1
        SET selectedColumnMinusOne TO userInputFloor DIVIDED BY nbFloors MULTIPLY BY rightNbOfColumn
        SET selectedColumn TO selectedColumnMinusOne MINUS 1
        CALL Column selectedColumn callColumnElevatorFromLobby WITH userInputFloorx 
    ENDSEQUENCE

    SEQUENCE callElevatorFromOther USING userFloor
        SET rightNbOfColumn TO nbColumns MINUS 1
        SET selectedColumnMinusOne TO userFloor DIVIDED BY nbFloors MULTIPLY BY rightNbOfColumn
        SET selectedColumn TO selectedColumnMinusOne MINUS 1
        CALL Column selectedColumn callColumnElevatorFromLobby WITH userFloor
    ENDSEQUENCE

ENDDEFINE

'        NEEDED TO INDEX THE BASEMENT FLOORS TO THE RIGHT VALUE
'        SET nbBasements TO nbBasements MULTIPLY BY nbBasements TIMES 2
'        INCREMENT nbBasements

DEFINE Column USING nbFloors AND Index AND nbElevatorsPerColumn
    SET columnID TO Index
    SET columnFloors TO nbFloors

    SEQUENCE createElevatorsList USING Index
        FOR nbElevatorsPerColumn
            SET elevatorsList TO NEW Elevator USING Index AND columnID
    ENDSEQUENCE

    SEQUENCE callColumnElevatorFromLobby USING userInputFloor
        SET bestElevator TO first Elevator created 'elevatorsList Elevator Index 1'
        SET bestTrajectory TO columnFloors MULTIPLY BY 2
        'The numberCheck is used to know which possibilities to check'
        SET numberCheck TO -1

        FOR EACH Elevator IN elevatorsList
            'If the distanceButtonElevator is lower than 0, it means that the Elevator is on the opposite side of the Button'
            SET distanceButtonElevator TO buttonFloor MINUS elevatorFloor
            SET rightDirection TO NEGATIVE OF Elevator Floor MULTIPLY BY Elevator Direction
            'Best case scenario, Elevator on the same Floor and on the same Direction as the User requested'
            IF Elevator Direction IS EQUAL TO 0 AND elevatorFloor IS EQUAL TO 0
                SET bestElevator TO Elevator
                RETURN bestElevator
            'Elevator is Idle'
            ELSE IF Elevator Direction IS EQUAL TO 0
                SET distanceButtonElevator TO ABSOLUTE OF distanceButtonElevator
                'If there one Idle Elevator, it will stop checking the last condition'
                IF numberCheck IS SMALLER THAN 1
                    SET numberCheck TO 1
                    SET bestTrajectory TO distanceButtonElevator
                    SET bestElevator TO Elevator
                'If there's another Idle Elevator, it will compare those Elevators together'
                ELSE IF numberCheck is EQUAL TO 1 AND distanceButtonElevator IS SMALLER THAN bestTrajectory
                    SET bestTrajectory to distanceButtonElevator
                    SET bestElevator TO Elevator
                ENDIF
            'Elevator Direction is passed the User's Floor, then has to finish it's own course and pick up the User afterwards'
            ELSE IF numberCheck IS SMALLER THAN 0
                SET distanceElevatorTarget TO ABSOLUTE OF elevatorFloor MINUS Elevator targetFloor
                SET distanceButtonTarget TO ABSOLUTE OF Elevator targetFloor MINUS buttonFloor
                SET elevatorButtonTrajectory TO distanceElevatorTarget ADD distanceButtonTarget
                IF elevatorButtonTrajectory IS SMALLER THAN columnFloors BY 2
                    SET bestTrajectory TO elevatorButtonTrajectory
                    SET bestElevator TO Elevator ID
                ENDIF
            ENDIF
        ENDFOR
    ENDSEQUENCE

    SEQUENCE callColumnElevatorFromOther USING userFloor
        userFloor - Elevator Floor * Elevator Direction > 0 GOOD
        SET bestElevator TO first Elevator created 'elevatorsList Elevator Index 1'
        SET bestTrajectory TO columnFloors MULTIPLY BY 2
        'The numberCheck is used to know which possibilities to check'
        SET numberCheck TO -1

        FOR EACH Elevator IN elevatorsList
            'If the distanceButtonElevator is lower than 0, it means that the Elevator is on the opposite side of the Button'
            SET distanceButtonElevator TO userFloor MINUS elevatorFloor
            SET rightDirection TO distanceButtonElevator MULTIPLY BY Elevator Direction
            'Best case scenario, Elevator on the same Floor and on the same Direction as the User requested'
            IF rightDirection IS EQUAL TO 0 AND elevatorFloor IS EQUAL TO userFloor
                SET bestElevator TO Elevator
                RETURN bestElevator
            'Elevator is Idle'
            ELSE IF Elevator Direction IS EQUAL TO 0
                SET distanceButtonElevator TO ABSOLUTE OF distanceButtonElevator
                'If there one Idle Elevator, it will stop checking the last condition'
                IF numberCheck IS SMALLER THAN 1
                    SET numberCheck TO 1
                    SET bestTrajectory TO distanceButtonElevator
                    SET bestElevator TO Elevator
                'If there's another Idle Elevator, it will compare those Elevators together'
                ELSE IF numberCheck is EQUAL TO 1 AND distanceButtonElevator IS SMALLER THAN bestTrajectory
                    SET bestTrajectory to distanceButtonElevator
                    SET bestElevator TO Elevator
                ENDIF
            'Elevator Direction is passed the User's Floor, then has to finish it's own course and pick up the User afterwards'
            ELSE IF numberCheck IS SMALLER THAN 0
                SET distanceElevatorTarget TO ABSOLUTE OF elevatorFloor MINUS Elevator targetFloor
                SET distanceButtonTarget TO ABSOLUTE OF Elevator targetFloor MINUS buttonFloor
                SET elevatorButtonTrajectory TO distanceElevatorTarget ADD distanceButtonTarget
                IF elevatorButtonTrajectory IS SMALLER THAN columnFloors BY 2
                    SET bestTrajectory TO elevatorButtonTrajectory
                    SET bestElevator TO Elevator ID
                ENDIF
            ENDIF
        ENDFOR
        RETURN bestElevator
        
    ENDSEQUENCE

ENDDEFINE

DEFINE Elevator USING _id AND _column
    SET ID TO _id
    SET Column TO _column
    SET Direction TO 0
    SET targetFloor
    SET currentFloor

    SEQUENCE movingElevator USING _targetFloor
        IF _targetFloor IS EQUAL TO currentFloor
            CALL openDoors
        ELSE
            SET Steps TO _targetFloor MINUS currentFloor
            SET Direction TO Steps DIVIDED BY ABSOLUTE OF Steps
            SET Steps TO ABSOLUTE OF Steps
            
            FOR Steps ADD Direction
                ADD Direction TO currentFloor
            ENDFOR
            SET _targetFloor TO currentFloor
            CALL openDoors
        ENDIF
    ENDSEQUENCE

ENDDEFINE

DEFINE mainPanel USING Index
    SET ID
ENDDEFINE

DEFINE floorPanel
    SET
ENDDEFINE 

DEFINE Main
    READ nbColumns
    READ nbFloors
    READ nbBasements
    READ nbElevatorsPerColumn
    READ userInputFloor
    READ userFloor

'SCENARIO 1'
nbColumns IS EQUAL TO 4
nbBasements IS EQUAL TO 6
nbFloors IS EQUAL TO 60
nbElevatorsPerColumn IS EQUAL TO 5
Battery Column ID 2 elevatorsList Index 1 currentFloor TO 20
Battery Column ID 2 elevatorsList Index 1 Direction TO -1
Battery Column ID 2 elevatorsList Index 1 targetFloor TO 5
Battery Column ID 2 elevatorsList Index 2 currentFloor TO 3
Battery Column ID 2 elevatorsList Index 2 Direction TO 1
Battery Column ID 2 elevatorsList Index 2 targetFloor TO 15
Battery Column ID 2 elevatorsList Index 3 currentFloor TO 13
Battery Column ID 2 elevatorsList Index 3 Direction TO -1
Battery Column ID 2 elevatorsList Index 3 targetFloor TO 0
Battery Column ID 2 elevatorsList Index 4 currentFloor TO 15
Battery Column ID 2 elevatorsList Index 4 Direction TO -1
Battery Column ID 2 elevatorsList Index 4 targetFloor TO 2
Battery Column ID 2 elevatorsList Index 5 currentFloor TO 6
Battery Column ID 2 elevatorsList Index 5 Direction TO -1
Battery Column ID 2 elevatorsList Index 5 targetFloor TO 0

CALL Battery callElevatorFromLobby WITH 20

'SCENARIO 3'
Battery Column ID 4 elevatorsList Index 1 currentFloor TO 58
Battery Column ID 4 elevatorsList Index 1 Direction TO -1
Battery Column ID 4 elevatorsList Index 1 targetFloor TO 0
Battery Column ID 4 elevatorsList Index 2 currentFloor TO 50
Battery Column ID 4 elevatorsList Index 2 Direction TO 1
Battery Column ID 4 elevatorsList Index 2 targetFloor TO 60
Battery Column ID 4 elevatorsList Index 3 currentFloor TO 46
Battery Column ID 4 elevatorsList Index 3 Direction TO 1
Battery Column ID 4 elevatorsList Index 3 targetFloor TO 58
Battery Column ID 4 elevatorsList Index 4 currentFloor TO 0
Battery Column ID 4 elevatorsList Index 4 Direction TO 1
Battery Column ID 4 elevatorsList Index 4 targetFloor TO 54
Battery Column ID 4 elevatorsList Index 5 currentFloor TO 60
Battery Column ID 4 elevatorsList Index 5 Direction TO -1
Battery Column ID 4 elevatorsList Index 5 targetFloor TO 0

CALL Battery callElevatorFromOther WITH 54
